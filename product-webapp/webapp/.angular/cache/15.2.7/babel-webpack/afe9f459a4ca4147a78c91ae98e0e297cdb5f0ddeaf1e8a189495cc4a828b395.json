{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nlet ChatMessageComponent = class ChatMessageComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.messages = [];\n    this.newMessage = \"\";\n    this.offer = false;\n    this.dropdown = false;\n    this.dropdownValues = [\"Delete\"];\n    this.unsubscribe$ = new Subject();\n  }\n  ngOnInit() {\n    this.fetchChat();\n    this.userService.getMessageAddedObservable().pipe(takeUntil(this.unsubscribe$)).subscribe(() => {\n      this.fetchChat();\n    });\n  }\n  ngOnChanges() {\n    this.fetchChat();\n  }\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n  fetchChat() {\n    if (this.participantId1 && this.participantId2) {\n      this.userService.getChat(this.participantId1, this.participantId2).subscribe(chat => {\n        this.messages = chat?.data.messages;\n        this.scrollChatToBottom();\n      });\n    }\n  }\n  sendMessage() {\n    this.calculateCurrentDate();\n    const newMessageObj = {\n      \"senderId\": this.participantId1,\n      \"receiverId\": this.participantId2,\n      \"content\": this.newMessage,\n      \"timestamp\": this.currentDate\n    };\n    console.log(newMessageObj);\n    this.userService.addMessage(newMessageObj).subscribe(response => {\n      if (response.success) {\n        console.log(\"Added message successfully\");\n        this.newMessage = \"\";\n        this.userService.notifyMessageAdded();\n      } else {\n        console.log(\"Error adding message\");\n      }\n    });\n  }\n  calculateCurrentDate() {\n    const dateObj = new Date();\n    const day = dateObj.getDate();\n    const month = this.getMonthName(dateObj.getMonth());\n    const year = dateObj.getFullYear();\n    this.currentDate = `${day} ${month} ${year}`;\n  }\n  getMonthName(month) {\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return monthNames[month];\n  }\n  // open/close dropdown\n  toggleDropdown() {\n    this.dropdown = !this.dropdown;\n  }\n  toggleDialogAndSendMsg(amount) {\n    this.toggleDialog();\n    if (!this.offer && amount) {\n      this.newMessage = \"I would like to buy this product for: â‚¹\" + amount;\n      this.sendMessage();\n    }\n  }\n  toggleDialog() {\n    this.offer = !this.offer;\n  }\n  closeMessage() {\n    this.participantId2 = \"\";\n  }\n  scrollChatToBottom() {\n    setTimeout(() => {\n      const container = this.chatContainer.nativeElement;\n      container.scrollTop = container.scrollHeight;\n    }, 0);\n  }\n  openPageInNewTab() {\n    window.open('/payment', '_blank');\n  }\n};\n__decorate([Input()], ChatMessageComponent.prototype, \"participantId1\", void 0);\n__decorate([Input()], ChatMessageComponent.prototype, \"participantId2\", void 0);\n__decorate([ViewChild('chatContainer')], ChatMessageComponent.prototype, \"chatContainer\", void 0);\nChatMessageComponent = __decorate([Component({\n  selector: 'app-chat-message',\n  templateUrl: './chat-message.component.html',\n  styleUrls: ['./chat-message.component.css']\n})], ChatMessageComponent);\nexport { ChatMessageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}