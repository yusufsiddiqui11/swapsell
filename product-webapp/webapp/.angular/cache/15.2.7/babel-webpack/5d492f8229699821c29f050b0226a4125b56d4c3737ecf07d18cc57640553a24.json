{"ast":null,"code":"import { BehaviorSubject, Subject } from \"rxjs\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { map, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      // url to fetch a chat between 2 participants\n      this.URL = \"http://localhost:8081/swapsell/api\";\n      this.userSubject = new BehaviorSubject(null);\n      this.user$ = this.userSubject.asObservable();\n      this.messageAddedSubject = new Subject();\n    }\n    // fetch user data\n    fetchUser(email) {\n      this.http.get(\"http://localhost:8082/user/\" + email).subscribe(data => {\n        console.log(\"user data in service\", data);\n        this.userSubject.next(data);\n      });\n    }\n    removeUser() {\n      this.userSubject.next({});\n    }\n    // Extract email from already fetched user data\n    getUserEmail() {\n      return this.user$.pipe(map(user => user?.email || \"\"));\n    }\n    // fetch all users who have contacted logged in user\n    getUsers(participantId) {\n      const params = new HttpParams().set(\"participantId\", participantId);\n      return this.http.get(`${this.URL}/chats/users`, {\n        params\n      });\n    }\n    updateUser(user, email) {\n      user.email = email;\n      console.log(\"user service\", user);\n      return this.http.post(\"http://localhost:8082/user/update\", user).pipe(tap(updatedUser => {\n        // Update the user$ observable with the updated user data\n        this.userSubject.next(updatedUser);\n      }));\n    }\n    // check for existing chat between 2 users\n    isChat(participantId1, participantId2) {\n      const params = new HttpParams().set(\"participantId1\", participantId1).set(\"participantId2\", participantId2);\n      return this.http.get(`${this.URL}/chats/present`, {\n        params\n      }).pipe(map(response => {\n        return response;\n      }));\n    }\n    // create a new chat between 2 users\n    createNewChat(participantId1, participantId2) {\n      console.log(\"creating chat in service\", participantId1, participantId2);\n      const url = `${this.URL}/chats`;\n      const body = {\n        participant1: participantId1,\n        participant2: participantId2,\n        message: \"\"\n      };\n      return this.http.post(url, body);\n    }\n    getMessageAddedObservable() {\n      return this.messageAddedSubject.asObservable();\n    }\n    notifyMessageAdded() {\n      this.messageAddedSubject.next();\n    }\n    // fetch chat between 2 users\n    getChat(participantId1, participantId2) {\n      const params = new HttpParams().set(\"participantId1\", participantId1).set(\"participantId2\", participantId2);\n      return this.http.get(`${this.URL}/chats`, {\n        params\n      });\n    }\n    addMessage(message) {\n      return this.http.post(`${this.URL}/chats/messages`, message);\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: \"root\"\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}