{"ast":null,"code":"import { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http, userService) {\n      this.http = http;\n      this.userService = userService;\n      this.productsSubject = new BehaviorSubject([]);\n      this.products$ = this.productsSubject.asObservable();\n      this.URL = \"http://localhost:9090\";\n    }\n    // fetch all products\n    fetchProducts() {\n      this.http.get(this.URL + \"/products2\").subscribe(products => {\n        this.productsSubject.next(products);\n      }, error => {\n        console.error('Error fetching products:', error);\n      });\n    }\n    fetchProductsForUser(email) {\n      return this.http.get(this.URL + \"/products/\" + email);\n    }\n    // add a new product to database \n    addProduct(product) {\n      return new Observable(observer => {\n        this.userService.getUserEmail().subscribe(email => {\n          product.email = email;\n          const currentDate = new Date();\n          const options = {\n            month: 'short',\n            day: '2-digit',\n            year: 'numeric'\n          };\n          product.date = currentDate.toLocaleDateString('en-US', options).toUpperCase();\n          console.log(\"Product top be added: \", product);\n          this.http.post(this.URL + \"/product\", product).subscribe(() => {\n            observer.next(true); // Request succeeded\n            observer.complete();\n          }, () => {\n            observer.next(false); // Request failed\n            observer.complete();\n          });\n        });\n      });\n    }\n    // returns a single product by id \n    getProductById(productId) {\n      console.log(productId);\n      return this.products$.pipe(map(products => products.find(product => product.id == productId)));\n    }\n    // returns products which include the keyword in the title \n    getProductsByKeyword(keyword) {\n      console.log(keyword);\n      return this.products$.pipe(map(products => {\n        return products.filter(product => product.title.toLowerCase().includes(keyword.toLowerCase()));\n      }));\n    }\n    // returns products based on category \n    getProductsByCategory(category) {\n      console.log(category);\n      return this.products$.pipe(map(products => {\n        return products.filter(product => product.category.toLowerCase().includes(category.toLowerCase()));\n      }));\n    }\n  }\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}